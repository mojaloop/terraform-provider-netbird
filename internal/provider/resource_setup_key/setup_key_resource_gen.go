// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_setup_key

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func SetupKeyResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"auto_groups": schema.ListAttribute{
				ElementType:         types.StringType,
				Required:            true,
				Description:         "List of group IDs to auto-assign to peers registered with this key",
				MarkdownDescription: "List of group IDs to auto-assign to peers registered with this key",
			},
			"ephemeral": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Indicate that the peer will be ephemeral or not",
				MarkdownDescription: "Indicate that the peer will be ephemeral or not",
			},
			"expires": schema.StringAttribute{
				Computed:            true,
				Description:         "Setup Key expiration date",
				MarkdownDescription: "Setup Key expiration date",
			},
			"expires_in": schema.Int64Attribute{
				Required:            true,
				Description:         "Expiration time in seconds",
				MarkdownDescription: "Expiration time in seconds",
				Validators: []validator.Int64{
					int64validator.Between(86400, 31536000),
				},
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "Setup Key ID",
				MarkdownDescription: "Setup Key ID",
			},
			"key": schema.StringAttribute{
				Computed:            true,
				Description:         "Setup Key value",
				MarkdownDescription: "Setup Key value",
			},
			"last_used": schema.StringAttribute{
				Computed:            true,
				Description:         "Setup key last usage date",
				MarkdownDescription: "Setup key last usage date",
			},
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "Setup Key name",
				MarkdownDescription: "Setup Key name",
			},
			"revoked": schema.BoolAttribute{
				Computed:            true,
				Description:         "Setup key revocation status",
				MarkdownDescription: "Setup key revocation status",
			},
			"state": schema.StringAttribute{
				Computed:            true,
				Description:         "Setup key status, \"valid\", \"overused\",\"expired\" or \"revoked\"",
				MarkdownDescription: "Setup key status, \"valid\", \"overused\",\"expired\" or \"revoked\"",
			},
			"type": schema.StringAttribute{
				Required:            true,
				Description:         "Setup key type, one-off for single time usage and reusable",
				MarkdownDescription: "Setup key type, one-off for single time usage and reusable",
			},
			"updated_at": schema.StringAttribute{
				Computed:            true,
				Description:         "Setup key last update date",
				MarkdownDescription: "Setup key last update date",
			},
			"usage_limit": schema.Int64Attribute{
				Required:            true,
				Description:         "A number of times this key can be used. The value of 0 indicates the unlimited usage.",
				MarkdownDescription: "A number of times this key can be used. The value of 0 indicates the unlimited usage.",
			},
			"used_times": schema.Int64Attribute{
				Computed:            true,
				Description:         "Usage count of setup key",
				MarkdownDescription: "Usage count of setup key",
			},
			"valid": schema.BoolAttribute{
				Computed:            true,
				Description:         "Setup key validity status",
				MarkdownDescription: "Setup key validity status",
			},
			"rotation_id":  schema.StringAttribute{
				Description: "trigger rotation of setup key",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
                    stringplanmodifier.RequiresReplace(),
                },
			},
		},
	}
}

type SetupKeyModel struct {
	AutoGroups types.List   `tfsdk:"auto_groups"`
	Ephemeral  types.Bool   `tfsdk:"ephemeral"`
	Expires    types.String `tfsdk:"expires"`
	ExpiresIn  types.Int64  `tfsdk:"expires_in"`
	Id         types.String `tfsdk:"id"`
	Key        types.String `tfsdk:"key"`
	LastUsed   types.String `tfsdk:"last_used"`
	Name       types.String `tfsdk:"name"`
	Revoked    types.Bool   `tfsdk:"revoked"`
	State      types.String `tfsdk:"state"`
	Type       types.String `tfsdk:"type"`
	UpdatedAt  types.String `tfsdk:"updated_at"`
	UsageLimit types.Int64  `tfsdk:"usage_limit"`
	UsedTimes  types.Int64  `tfsdk:"used_times"`
	Valid      types.Bool   `tfsdk:"valid"`
	RotationId types.String `tfsdk:"rotation_id"`
}
